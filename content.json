{"meta":{"title":"DEVPOOL","subtitle":"All about software development.","description":null,"author":"Kyeongjin Kim","url":"https://indra818.github.io"},"pages":[],"posts":[{"title":"Maven Plugin을 활용한 Docker Container 이미지 배포 환경 구성","slug":"jib-maven-plugin-manual","date":"2018-08-07T06:15:56.000Z","updated":"2018-08-14T02:53:33.871Z","comments":true,"path":"2018/08/07/jib-maven-plugin-manual/","link":"","permalink":"https://indra818.github.io/2018/08/07/jib-maven-plugin-manual/","excerpt":"","text":"본 문서는 Google Container Tools 에서 제공하는 메이븐 플러그인 중 Jib 을 활용하여 각 프로젝트별 Docker 이미지를 메이블으로 생성 및 배포하는 환경 구축에 대해 기술한다. 배포 환경별 설정 및 구성 Amazon ECR Private Docker Registry on Nexus POM 파일 내에 플러그인 설정 내용 추가 Maven Profile 별 설정 대상으로 하는 클라우드 환경은 AWS와 Nexus를 활용한 자체 구축 Private Docker Registry이다. 배포 환경별 설정 및 구성Amazon ECRAWS CLI 설치 및 구성AWS CLI 설치 Windows 환경 AWS에서 제공하는 MSI 설치 관리자 페이지에서 본인 환경에 맞는 MSI 설치 파일을 다운 받아 설치 후 해당 페이지에서 안내하는 가이드라인을 따른다. Unix (Linux or macOS) 환경 터미널에서 아래 명령을 실행하여 설치 스크립트를 다운로드 12curl \"https://bootstrap.pypa.io/get-pip.py\" -o \"get-pip.py\"sudo python get-pip.py Pip를 사용하여 AWS CLI를 설치 1sudo pip install awscli 정상 설치 여부 확인 1aws help AWS CLI 설치를 위해서는 Python 2.6.5 버전 이상이 필요하며 macOS의 경우 pip를 사용한 설치가 안 될 수도 있다. 이 경우 아래 링크를 참조하여 수동 설치하도록 한다. macOS에서 AWS Command Line Interface 설치 AWS CLI 구성터미널 또는 CMD 화면에서 아래 명령을 실행한다. 아래 명령은 기본 설정이 변경되지 않는 한 최초 1회만 필요하다. 12345aws configureAWS Access Key ID [None]: [AWS로부터 발급 받은 액세스 키 입력]AWS Secret Access Key [None]: [AWS로부터 발급 받은 시크릿 액세스 키 입력]Default region name [None]: ap-northeast-2Default output format [None]: json AWS Access Key와 Secret Access Key에 대해서는 아래 링크를 참조한다. AWS 계정에 대한 액세스 키 관리 AWS Access Key와 Secret Key를 만들고 CLI 사용해보기 Amazon ECR Docker Credential Helper 설치 및 구성Amazon ECR Docker Credential Helper는 Docker 이미지를 Amazon Elastic Container Registry (이하 ECR)에 손쉽게 배포하기 위해 AWS에서 만든 툴로써 AWS 인증 처리와 이미지 배포를 담당한다. https://github.com/awslabs/amazon-ecr-credential-helper 설치설치를 위해서는 go 언어 1.6버전 이상이 시스템에 설치되어 있어야 하며, git 및 make 모듈도 설치되어 있어야 한다. 위 환경이 갖추어진 상태라면 터미널 창에서 아래 명령어를 실행하여 모듈 소스코드를 다운로드한다. 1go get -u github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login 다운로드를 완료 한 후 아래 경로로 이동하여 make 명령을 실행한다. 123cd ~/go/src/github.com/awslabs/amazon-ecr-credential-helpermake docker TARGET_GOOS=darwin # for macOSmake docker TARGET_GOOS=windows # for Windows 위 명령은 macOS에서 실행한 경우이고 시스템 및 사용자 환경에 따라 상이할 수 있다. 빌드를 완료한 후 생성된 바이너리 파일의 경로를 시스템 환경변수의 PATH 설정에 추가하여 어느 경로에서도 실행 가능하도록 구성한다. 환경설정Docker 환경설정 파일(~/.docker/config.json)에 아래 내용을 추가 후 Docker를 재기동한다. 123456&#123; \"credsStore\" : \"ecr-login\", \"credHelpers\" : &#123; \"&#123;ECR 식별 번호&#125;.dkr.ecr.ap-northeast-2.amazonaws.com\": \"ecr-login\" &#125;&#125; 관련 참조문서 https://github.com/awslabs/amazon-ecr-credential-helper https://aws.amazon.com/ko/blogs/compute/authenticating-amazon-ecr-repositories-for-docker-cli-with-credential-helper/ Private Docker Registry on NexusMaven Setting 파일 내 서버 인증정보 추가NEXUS 서버를 이용해 구축한 Private Docker Registry의 경우 HTTPS를 지원하지 않고 있으므로 Maven 환경설정 파일(settings.xml)에 서버 인증정보를 아래와 같이 추가하여 플러그인 사용 시 인증정보를 사용할 수 있도록 설정한다. 1234567891011&lt;settings&gt; ... &lt;servers&gt; ... &lt;server&gt; &lt;id&gt;img.example.com:12000&lt;/id&gt; &lt;!-- 식별자는 서버 URL로 설정 --&gt; &lt;username&gt;admin&lt;/username&gt; &lt;!-- 로그인 아이디 --&gt; &lt;password&gt;test!@&lt;/password&gt; &lt;!-- 패스워드 --&gt; &lt;/server&gt; &lt;/servers&gt;&lt;/settings&gt; 플러그인 메뉴얼 페이지에서는 적절한 docker credential helper가 없을 경우 사용하도록 권고하고 있으며, setting.xml 파일에 인증정보를 그대로 노출할 경우 보안에 취약할 수 있으므로 주의해야 한다. Docker Daemon 설정에 insecure registry 정보 등록macOS는 Docker 공식 설치 가이드 라인에 따라 설치한 경우 아래 링크에 첨부된 스크린샷을 참고하여 insecure registry 정보 등록을 완료한다. https://stackoverflow.com/a/39492340 다른 OS의 경우에는 아래 링크를 참고한다. Test an insecure registry Configure docker service to use insecure registry 메이븐 커맨드 실행 시 HttpsOnly 옵션 비활성화jib-maven-plugin 사용 시 대상 Docker Registry가 HTTPS를 지원하지 않을 경우, 플러그인 명령 실행 시 아래와 같이 sendCredentialsOverHttp 옵션을 true로 하여 실행해야 한다. 1compile jib:build -DsendCredentialsOverHttp=true POM 파일 내에 플러그인 설정 내용 추가플러그인 사용을 위한 모든 환경 설정을 마친 후 Docker 이미지로 생성 및 배포할 프로젝트의 pom.xml 파일에 아래와 같이 플러그인 사용 설정을 추가한다. 1234567891011121314151617181920&lt;project&gt; ... &lt;build&gt; &lt;plugins&gt; ... &lt;plugin&gt; &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt; &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt; &lt;version&gt;0.9.7&lt;/version&gt; &lt;configuration&gt; &lt;to&gt; &lt;image&gt;myimage&lt;/image&gt; &lt;/to&gt; &lt;/configuration&gt; &lt;/plugin&gt; ... &lt;/plugins&gt; &lt;/build&gt; ...&lt;/project&gt; 배포 환경에 따라 위 내용 중 configuration 노드의 내용을 달리한다. AWS12345&lt;configuration&gt; &lt;to&gt; &lt;image&gt;&#123;ECR 식별 번호&#125;.dkr.ecr.ap-northeast-2.amazonaws.com/[Repo 명]:[태그명]&lt;/image&gt; &lt;/to&gt;&lt;/configuration&gt; Private Docker Registry123456&lt;configuration&gt; &lt;to&gt; &lt;image&gt;img.example.com:12000/[이미지 명칭]:[태그명]&lt;/image&gt; &lt;/to&gt; &lt;allowInsecureRegistries&gt;true&lt;/allowInsecureRegistries&gt;&lt;/configuration&gt; Maven Profile 별 설정배포 상황에 맞게 이미지 생성 및 배포를 쉽게 하기 위해서 Maven Profile을 아래와 같이 추가 후 플러그인 설정부 역시 변경한다. Maven Profile 추가 123456789101112131415161718192021222324252627282930&lt;project&gt; ... &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;local&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;/activation&gt; &lt;properties&gt; &lt;docker.repository&gt;img.example.com:12000/$&#123;project.artifactId&#125;:$&#123;deploy.tag.name&#125;&lt;/docker.repository&gt; &lt;docker.allow.insecure&gt;true&lt;/docker.allow.insecure&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;profile&gt; &lt;id&gt;local-dev&lt;/id&gt; &lt;properties&gt; &lt;docker.repository&gt;img.example.com:12000/$&#123;project.artifactId&#125;:$&#123;deploy.tag.name&#125;&lt;/docker.repository&gt; &lt;docker.allow.insecure&gt;true&lt;/docker.allow.insecure&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;profile&gt; &lt;id&gt;aws&lt;/id&gt; &lt;properties&gt; &lt;docker.repository&gt;&#123;ECR 식별 번호&#125;.dkr.ecr.ap-northeast-2.amazonaws.com/$&#123;project.artifactId&#125;:$&#123;deploy.tag.name&#125;&lt;/docker.repository&gt; &lt;docker.allow.insecure&gt;false&lt;/docker.allow.insecure&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;/profiles&gt; ...&lt;/project&gt; 위 내용중 ${deploy.tag.name}은 또 다른 메이븐 플러그인인 Git 플러그인으로 Git 레포지토리로 부터 tag명 및 커밋 메세지 등 다양한 정보를 취득할 수 있다. 관련 정보 및 사용법은 아래 링크를 참고한다. https://github.com/ktoso/maven-git-commit-id-plugin 플러그인 설정 수정 1234567891011&lt;configuration&gt; &lt;to&gt; &lt;image&gt;$&#123;docker.repository&#125;&lt;/image&gt; &lt;/to&gt; &lt;allowInsecureRegistries&gt;&lt;configuration&gt; &lt;to&gt; &lt;image&gt;img.example.com:12000/[이미지 명칭]:[태그명]&lt;/image&gt; &lt;/to&gt; &lt;allowInsecureRegistries&gt;true&lt;/allowInsecureRegistries&gt;&lt;/configuration&lt;/allowInsecureRegistries&gt;&lt;/configuration","categories":[{"name":"DevOps","slug":"DevOps","permalink":"https://indra818.github.io/categories/DevOps/"},{"name":"Docker","slug":"DevOps/Docker","permalink":"https://indra818.github.io/categories/DevOps/Docker/"}],"tags":[{"name":"jib","slug":"jib","permalink":"https://indra818.github.io/tags/jib/"},{"name":"maven","slug":"maven","permalink":"https://indra818.github.io/tags/maven/"},{"name":"docker","slug":"docker","permalink":"https://indra818.github.io/tags/docker/"},{"name":"delivery","slug":"delivery","permalink":"https://indra818.github.io/tags/delivery/"},{"name":"devops","slug":"devops","permalink":"https://indra818.github.io/tags/devops/"}]},{"title":"Thymeleaf 태그 레퍼런스 (2.1.4 버전 기준)","slug":"thymeleaf-tag-reference","date":"2017-11-23T11:40:33.000Z","updated":"2018-08-07T05:40:56.333Z","comments":true,"path":"2017/11/23/thymeleaf-tag-reference/","link":"","permalink":"https://indra818.github.io/2017/11/23/thymeleaf-tag-reference/","excerpt":"","text":"본 문서는 아래 링크에 기재된 내용을 번역한 문서이다. http://qiita.com/rubytomato@github/items/ac65c2203d16d1a1bbd7 개요Thymeleaf를 Spring-Boot의 뷰 템플릿 엔진으로서 사용하는 경우의 사용법을 기술한다. 환경 Windows 7 (64bit) Java 1.8.0_65 Spring-Boot 1.3.0 Thymeleaf 2.1.4 참고 Thymeleaf Home What’s new in Thymeleaf 2.1 Tutorial : Using Thymeleaf (일본어) 변수text (th:text)변수 값을 태그의 텍스트로 표시할 때에는 th:text 속성과 ${...} 구문(변수식)을 사용한다. 123/* Java */String username = \"kyeongjin\";model.addAttribute(\"username\", username); 12&lt;!-- Thymeleaf 템플릿 --&gt;&lt;p th:text=\"$&#123;username&#125;\"&gt;name&lt;/p&gt; 12&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;kyeongjin&lt;/p&gt; unescape text (th:utext)변수의 값을 escape 처리하지 않고 표시할 때에는 th:utext 속성을 사용한다. th:text 구문은 escape 처리를 하고 텍스트를 출력하기 때문에 변수 내 태그 문자가 들어있어도 무시하고 텍스트로 표시함. 123/* Java */String message = \"&lt;p&gt;Hello World!&lt;/p&gt;\";model.addAttribute(\"message\", message); 123&lt;!-- Thymeleaf 템플릿 --&gt;&lt;div th:text=\"$&#123;message&#125;\"&gt;&lt;/div&gt;&lt;div th:utext=\"$&#123;message&#125;\"&gt;&lt;/div&gt; 123&lt;!-- HTML 출력 결과 --&gt;&lt;div&gt;&amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;&lt;/div&gt; &lt;!-- 실제 브라우저에서는 '&lt;p&gt;Hello World!&lt;/p&gt;'로 표시됨 --&gt;&lt;div&gt;&lt;p&gt;Hello World!&lt;/p&gt;&lt;/div&gt; 인라인 처리 (th:inline)태그 내 텍스트 중 일부를 Controller로부터 전달된 변수 값으로 표시하려 할 경우 th:inline 속성을 사용하고 표시할 변수를 [[…]]로 묶는다. 일반적인 태그에서는 잘 사용되지 않으며 script 태그에서 주로 사용된다. 일반적으로 여러 줄의 코드를 가진 javascript 코드의 내 변수에 Controller로부터 받은 파라미터 값으로 초기화할 때 사용한다. 12&lt;!-- Thymeleaf 템플릿 --&gt;&lt;p th:inline=\"text\"&gt;Hello, [[$&#123;session.user.name&#125;]]!&lt;/p&gt; 12&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;Hello, kyeongjin&lt;/p&gt; 문자열 연결문자열과 변수를 + 연산자로 연결할 수 있다. 12&lt;!-- Thymeleaf 템플릿 --&gt;&lt;p th:text=\"'Hello, ' + $&#123;username&#125;\"&gt;&lt;/p&gt; 12&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;Hello, kyeongjin&lt;/p&gt; 치환처리|${…}|를 사용하면 텍스트 내에 변수 값을 포함시킬 수 있다. 12&lt;!-- Thymeleaf 템플릿 --&gt;&lt;p th:text=\"|Hello, $&#123;username&#125;|\"&gt;&lt;/p&gt; 12&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;Hello, kyeongjin&lt;/p&gt; 기본값 설정변수 값이 null일 경우, null 대신에 표시할 기본값을 설정할 수 있다. 기본값을 정의하는 방법으로는 ?: 또는 #string 이라는 표현 도구 객체(Expression Utility Object)를 사용한다. ?: (삼항연산자)12/* Java */String username = null; 12&lt;!-- Thymeleaf 템플릿 --&gt;&lt;p th:text=\"$&#123;username&#125;?: 'unknown'\"&gt;&lt;/p&gt; 12&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;unknown&lt;/p&gt; #strings.defaultString12&lt;!-- Thymeleaf 템플릿 --&gt;&lt;p th:text=\"$&#123;#strings.defaultString(username, 'unknown')&#125;\"&gt;&lt;/p&gt; 12&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;unknown&lt;/p&gt; 표현 형식 (Format)변수 값을 일정한 형식에 맞추어 표시할 때에는 표현 도구 객체(Expression Utility Object)를 사용한다. 날짜 (#dates)123/* Java */Date date = new Date();model.addAttribute(\"date\", date); 123456&lt;!-- Thymeleaf 템플릿 --&gt;&lt;p th:text=\"$&#123;#dates.format(date, 'yyyy/MM/dd HH:mm:ss')&#125;\"&gt;&lt;/p&gt;&lt;p th:text=\"|$&#123;#dates.day(date)&#125;일|\"&gt;&lt;/p&gt;&lt;p th:text=\"|$&#123;#dates.month(date)&#125;월|\"&gt;&lt;/p&gt;&lt;p th:text=\"$&#123;#dates.monthName(date)&#125;\"&gt;&lt;/p&gt;&lt;p th:text=\"|$&#123;#dates.year(date)&#125;년|\"&gt;&lt;/p&gt; 123456&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;2016/12/02 20:26:07&lt;/p&gt;&lt;p&gt;14일&lt;/p&gt;&lt;p&gt;12월&lt;/p&gt;&lt;p&gt;12월&lt;/p&gt;&lt;p&gt;2016년&lt;/p&gt; 현재 날짜 (#dates.createNow())현재 날짜는 #dates.createNow()로 취득한다. 12&lt;!-- Thymeleaf 템플릿 --&gt;&lt;p th:text=\"$&#123;#dates.format(#dates.createNow(), 'yyyy년MM월dd일 HH시mm분ss초')&#125;\"&gt;&lt;/p&gt; 12&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;2016년12월02일 20시26분08초&lt;/p&gt; 수치표현 (#numbers)정수 값 표현에는 #numbers.formatInteger를, 부동소수점 표현에는 #numbers.formatDecimal을 사용한다. 123&lt;!-- Thymeleaf 템플릿 --&gt;&lt;p th:text=\"$&#123;#numbers.formatInteger(1000000, 3, 'COMMA')&#125;\"&gt;&lt;/p&gt;&lt;p th:text=\"$&#123;#numbers.formatDecimal(123456.789, 3, 'COMMA', 2, 'POINT')&#125;\"&gt;&lt;/p&gt; 123&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;1,000,000&lt;/p&gt;&lt;p&gt;123,456.79&lt;/p&gt; 메시지 리소스메시지 리소스 파일의 값을 표시할 때에는 #{…} 구문이라든지, #messages라는 표현 도구 객체(Expression Utility Object)를 사용한다. 메시지 표현메시지 리소스에 placeholder가 있는 경우, 메시지 키 값 뒤에 (param1, param2, param3, …)의 형태로 기술한다. 1234# message properties fileapp.message1=Helloapp.message2=Hello, &#123;0&#125;!app.message3=Hello, &#123;0&#125;&#123;1&#125; 1234&lt;!-- Thymeleaf 템플릿 --&gt;&lt;p th:text=\"#&#123;app.message1&#125;\"&gt;&lt;/p&gt;&lt;p th:text=\"#&#123;app.message2($&#123;username&#125;)&#125;\"&gt;&lt;/p&gt;&lt;p th:text=\"#&#123;app.message3($&#123;username&#125;,$&#123;suffix&#125;)&#125;\"&gt;&lt;/p&gt; 1234&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;Hello, kyeongjin!&lt;/p&gt;&lt;p&gt;Hello, kyeongjin!?&lt;/p&gt; 메시지 키메시지 키의 전부 또는 일부를 변수로 지정할 수 있다. 123# message properties fileapp.am.message=Good morning!app.pm.message=Good afternoon! 12345/* Java */String messageKey =\"app.am.message\";model.addAttribute(\"messageKey\", messageKey);String ap = \"pm\";model.addAttribute(\"ap\", ap); 123&lt;!-- Thymeleaf 템플릿 --&gt;&lt;p th:text=\"#&#123;$&#123;messageKey&#125;($&#123;username&#125;)&#125;\"&gt;&lt;/p&gt;&lt;p th:text=\"#&#123;|app.$&#123;ap&#125;.message|($&#123;username&#125;)&#125;\"&gt;&lt;/p&gt; 123&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;Good morning! kyeongjin&lt;/p&gt;&lt;p&gt;Good afternoon! kyeongjin&lt;/p&gt; #messages 객체123456&lt;!-- Thymeleaf 템플릿 --&gt;&lt;p th:text=\"$&#123;#messages.msg('app.message1')&#125;\"&gt;&lt;/p&gt;&lt;p th:text=\"$&#123;#messages.msg('app.message2', username)&#125;\"&gt;&lt;/p&gt;&lt;p th:text=\"$&#123;#messages.msg('app.message3', username, suffix)&#125;\"&gt;&lt;/p&gt;&lt;p th:text=\"$&#123;#messages.msg(messageKey, username)&#125;\"&gt;&lt;/p&gt;&lt;p th:text=\"$&#123;#messages.msg('app.' + ap + '.message', username)&#125;\"&gt;&lt;/p&gt; 123456&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;Hello, kyeongjin!&lt;/p&gt;&lt;p&gt;Hello, kyeongjin!?&lt;/p&gt;&lt;p&gt;Good morning! kyeongjin&lt;/p&gt;&lt;p&gt;Good afternoon! kyeongjin&lt;/p&gt; URL 링크 표현URL 링크를 표현할 때에는 @{…} 구문을을 사용하면 편리하다. 링크 형식변수 값을 링크의 파라미터로 사용할 때에는 (파라미터명=${&#39;변수명&#39;}) 형태로 표현한다. 여러 개의 파라미터가 있는 경우에는 콤마로 구분하여 기술한다. 123&lt;!-- Thymeleaf 템플릿 --&gt;&lt;a href=\"/user/profile\" th:href=\"@&#123;/user/profile(id=$&#123;'ab123'&#125;)&#125;\"&gt;profile&lt;/a&gt;&lt;a href=\"/user/profile\" th:href=\"@&#123;/user/profile(id=$&#123;'ab123'&#125;,role=$&#123;'admin'&#125;)&#125;\"&gt;profile&lt;/a&gt; 123&lt;!-- HTML 출력 결과 --&gt;&lt;a href=\"/user/profile?id=ab123\"&gt;profile&lt;/a&gt;&lt;a href=\"/user/profile?id=ab123&amp;amp;role=admin\"&gt;profile&lt;/a&gt; REST 형식변수 값을 URL의 일부로서 사용할 때에는 placeholder를 {placeholder명}으로 정의하고, 그곳에 끼워넣을 값을 (placeholder명=${&#39;변수명&#39;}) 형태로 표현한다. 12&lt;!-- Thymeleaf 템플릿 --&gt;&lt;a href=\"index.html\" th:href=\"@&#123;/user/profile/&#123;id&#125;/&#123;seq&#125;(id=$&#123;'abc'&#125;,seq=$&#123;'1000'&#125;)&#125;\"&gt;profile&lt;/a&gt; 12&lt;!-- HTML 출력 결과 --&gt;&lt;a href=\"/user/profile/abc/1000\"&gt;profile&lt;/a&gt; 선택변수 표현일반적으로 변수 값을 표현할 때에는 ${…} 구문을 사용하지만, *{…} 구문(선택변수식)으로도 변수 값을 표시할 수 있다. (단, 이 경우에는 선택된 객체가 없는 경우만 해당) 하기의 템플릿은 같은 결과 값이 출력된다. 123&lt;!-- Thymeleaf 템플릿 --&gt;&lt;p th:text=\"$&#123;username&#125;\"&gt;&lt;/p&gt;&lt;p th:text=\"*&#123;username&#125;\"&gt;&lt;/p&gt; 123&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;kyeongjin&lt;/p&gt;&lt;p&gt;kyeongjin&lt;/p&gt; th:object 속성으로 객체를 지정하면, 선택표현식은 해당 객체 내에 멤버 변수를 대상으로 한다. 123456789101112131415/* Java : Model class */public class Item &#123; private Long id; private String name; private Integer price; private Date createAt; public Item(Long id, String name, Integer price, Date createAt) &#123; this.id = id; this.name = name; this.price = price; this.createAt = createAt; &#125; ...getter/setter는 생략...&#125; 123/* Java : Controller */Item item = new Item(10000L, \"맥스봉\", 500, new Date());model.addAttributes(\"item\", item); 1234567891011&lt;!-- Thymeleaf 템플릿 --&gt;&lt;div th:object=\"$&#123;item&#125;\"&gt; &lt;dl&gt; &lt;dt&gt;ID&lt;/dt&gt; &lt;dd th:text=\"*&#123;id&#125;\"&gt;&lt;/dd&gt; &lt;dt&gt;NAME&lt;/dt&gt; &lt;dd th:text=\"*&#123;name&#125;\"&gt;&lt;/dd&gt; &lt;dt&gt;PRICE&lt;/dt&gt; &lt;dd th:text=\"*&#123;price&#125;\"&gt;&lt;/dd&gt; &lt;/dl&gt;&lt;/div&gt; 1234567891011&lt;!-- HTML 출력 결과 --&gt;&lt;div&gt; &lt;dl&gt; &lt;dt&gt;ID&lt;/dt&gt; &lt;dd&gt;10000&lt;/dd&gt; &lt;dt&gt;NAME&lt;/dt&gt; &lt;dd&gt;맥스봉&lt;/dd&gt; &lt;dt&gt;PRICE&lt;/dt&gt; &lt;dd&gt;500&lt;/dd&gt; &lt;/dl&gt;&lt;/div&gt; 위의 코드 중 Thymeleaf 템플릿에서 th:object 속성을 사용하지 않고 기술한다면 다음과 같이 기술해야 한다. 12345678910&lt;div&gt; &lt;dl&gt; &lt;dt&gt;ID&lt;/dt&gt; &lt;dd th:text=\"*&#123;item.id&#125;\"&gt;&lt;/dd&gt; &lt;dt&gt;NAME&lt;/dt&gt; &lt;dd th:text=\"*&#123;item.name&#125;\"&gt;&lt;/dd&gt; &lt;dt&gt;PRICE&lt;/dt&gt; &lt;dd th:text=\"*&#123;item.price&#125;\"&gt;&lt;/dd&gt; &lt;/dl&gt;&lt;/div&gt; 반복 처리 (th:each)th:each 속성을 사용해서 컬렉션을 제어할 수 있다. 1234567/* Java */List&lt;Item&gt; items = new ArrayList&lt;&gt;();items.add(new Item(10000L, \"맥스봉\", 10, new Date()));items.add(new Item(10001L, \"감자칩\", 30, new Date()));items.add(new Item(10002L, \"믹스넛\", 10, new Date()));items.add(new Item(10003L, \"기네스\", 40, new Date()));model.addAttribute(\"items\", items); 123456789101112131415161718&lt;!-- Thymeleaf 템플릿 --&gt;&lt;table class=\"table table-sprite\"&gt; &lt;tr&gt; &lt;th&gt;count&lt;/th&gt; &lt;th&gt;id&lt;/th&gt; &lt;th&gt;name&lt;/th&gt; &lt;th&gt;price&lt;/th&gt; &lt;th&gt;create&lt;/th&gt; &lt;th&gt;current.id&lt;/th&gt; &lt;/tr&gt; &lt;tr th:each=\"item, stat : $&#123;items&#125;\" th:object=\"$&#123;item&#125;\"&gt; &lt;td th:text=\"*&#123;id&#125;\"&gt;id&lt;/td&gt; &lt;td th:text=\"*&#123;name&#125;\"&gt;name&lt;/td&gt; &lt;td th:text=\"*&#123;price&#125;\"&gt;price&lt;/td&gt; &lt;td th:text=\"*&#123;createAt&#125;\"&gt;createAt&lt;/td&gt; &lt;td th:text=\"$&#123;stat.current.id&#125;\"&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!-- HTML 출력 결과 --&gt;&lt;table class=\"table table-sprite\"&gt; &lt;tr&gt; &lt;th&gt;count&lt;/th&gt; &lt;th&gt;id&lt;/th&gt; &lt;th&gt;name&lt;/th&gt; &lt;th&gt;price&lt;/th&gt; &lt;th&gt;create&lt;/th&gt; &lt;th&gt;current.id&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;10000&lt;/td&gt; &lt;td&gt;맥스봉&lt;/td&gt; &lt;td&gt;10&lt;/td&gt; &lt;td&gt;Sun Jan 10 00:39:13 KST 2016&lt;/td&gt; &lt;td&gt;10000&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;10001&lt;/td&gt; &lt;td&gt;감자칩&lt;/td&gt; &lt;td&gt;30&lt;/td&gt; &lt;td&gt;Sun Jan 10 00:39:13 KST 2016&lt;/td&gt; &lt;td&gt;10001&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;10002&lt;/td&gt; &lt;td&gt;믹스넛&lt;/td&gt; &lt;td&gt;10&lt;/td&gt; &lt;td&gt;Sun Jan 10 00:39:13 KST 2016&lt;/td&gt; &lt;td&gt;10002&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;10003&lt;/td&gt; &lt;td&gt;기네스&lt;/td&gt; &lt;td&gt;40&lt;/td&gt; &lt;td&gt;Sun Jan 10 00:39:13 KST 2016&lt;/td&gt; &lt;td&gt;10003&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; #numbers.sequence#numbers.sequence는 인수로 지정한 2개의 수 범위에서 배열을 생성한다. 1234&lt;!-- Thymeleaf 템플릿 --&gt;&lt;th:block th:each=\"seq : $&#123;#numbers.sequence(1,10)&#125;\"&gt; &lt;p th:text=\"$&#123;seq&#125;\"&gt;0&lt;/p&gt;&lt;/th:block&gt; 1234567891011&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;1&lt;/p&gt;&lt;p&gt;2&lt;/p&gt;&lt;p&gt;3&lt;/p&gt;&lt;p&gt;4&lt;/p&gt;&lt;p&gt;5&lt;/p&gt;&lt;p&gt;6&lt;/p&gt;&lt;p&gt;7&lt;/p&gt;&lt;p&gt;8&lt;/p&gt;&lt;p&gt;9&lt;/p&gt;&lt;p&gt;10&lt;/p&gt; 상태변수 상태변수 내용 index 0부터 시작되는 현재의 반복 위치 count 1부터 시작되는 현재의 반복 위치 size 전채 항목 개수 current 현재의 객체 even 현재의 반복 위치가 짝수인 경우, true odd 현재의 반복 위치가 홀수인 경우, true first 현재의 반복 위치가 최초인 경우, true last 현재의 반복 위치가 최종인 경우, true 12345678910111213141516171819202122232425&lt;!-- Thymeleaf 템플릿 --&gt;&lt;table class=\"table table-sprite\"&gt; &lt;tr&gt; &lt;th&gt;index&lt;/th&gt; &lt;th&gt;count&lt;/th&gt; &lt;th&gt;size&lt;/th&gt; &lt;th&gt;current&lt;/th&gt; &lt;th&gt;even&lt;/th&gt; &lt;th&gt;odd&lt;/th&gt; &lt;th&gt;first&lt;/th&gt; &lt;th&gt;last&lt;/th&gt; &lt;th&gt;seq&lt;/th&gt; &lt;/tr&gt; &lt;tr th:each=\"seq, stat : $&#123;#numbers.sequence(1,3)&#125;\"&gt; &lt;td th:text=\"$&#123;stat.index&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;stat.count&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;stat.size&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;stat.current&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;stat.even&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;stat.odd&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;stat.first&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;stat.last&#125;\"&gt;&lt;/td&gt; &lt;td th:text=\"$&#123;seq&#125;\"&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!-- HTML 출력 결과 --&gt;&lt;table class=\"table table-sprite\"&gt; &lt;tr&gt; &lt;th&gt;index&lt;/th&gt; &lt;th&gt;count&lt;/th&gt; &lt;th&gt;size&lt;/th&gt; &lt;th&gt;current&lt;/th&gt; &lt;th&gt;even&lt;/th&gt; &lt;th&gt;odd&lt;/th&gt; &lt;th&gt;first&lt;/th&gt; &lt;th&gt;last&lt;/th&gt; &lt;th&gt;seq&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;0&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;true&lt;/td&gt; &lt;td&gt;false&lt;/td&gt; &lt;td&gt;true&lt;/td&gt; &lt;td&gt;false&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;false&lt;/td&gt; &lt;td&gt;true&lt;/td&gt; &lt;td&gt;false&lt;/td&gt; &lt;td&gt;false&lt;/td&gt; &lt;td&gt;2&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;true&lt;/td&gt; &lt;td&gt;false&lt;/td&gt; &lt;td&gt;false&lt;/td&gt; &lt;td&gt;true&lt;/td&gt; &lt;td&gt;3&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 로컬 변수 (th:with)th:with 속성을 사용하면 블록 내에서 유효한 지역 변수를 정의할 수 있다. 12345&lt;!-- Thymeleaf 템플릿 --&gt;&lt;div th:with=\"x=$&#123;100&#125;,y=$&#123;200&#125;\"&gt; &lt;p th:text=\"$&#123;x&#125;\"&gt;&lt;/p&gt; &lt;p th:text=\"$&#123;y&#125;\"&gt;&lt;/p&gt;&lt;/div&gt; 12345&lt;!-- HTML 출력 결과 --&gt;&lt;div&gt; &lt;p&gt;100&lt;/p&gt; &lt;p&gt;200&lt;/p&gt;&lt;/div&gt; 유사 블록 (th:block)임의로 블록을 정의하는 th:block 속성은 thymeleaf 버전 2.1부터 도입된 비교적 최신 속성이다. 12345&lt;!-- Thymeleaf 템플릿 --&gt;&lt;th:block th:with=\"x=$&#123;100&#125;,y=$&#123;200&#125;\"&gt; &lt;p th:text=\"$&#123;x&#125;\"&gt;&lt;/p&gt; &lt;p th:text=\"$&#123;y&#125;\"&gt;&lt;/p&gt;&lt;/th:block&gt; 123&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;100&lt;/p&gt;&lt;p&gt;200&lt;/p&gt; #ids 객체#ids 객체는 입력 폼 내 input 태그의 id 속성과 label 태그의 for 속성을 연결할 경우 편리하다. 1234567&lt;!-- Thymeleaf 템플릿 --&gt;&lt;form&gt; &lt;th:block th:each=\"seq : $&#123;#numbers.sequence(1,3)&#125;\"&gt; &lt;input type=\"text\" name=\"hobby\" th:id=\"$&#123;#ids.seq('id_hobby_')&#125;\" value=\"\" /&gt; &lt;label th:text=\"|hobby_$&#123;seq&#125;|\" th:for=\"$&#123;#ids.prev('id_hobby_')&#125;\"&gt;field&lt;/label&gt; &lt;/th:block&gt;&lt;/form&gt; 123456789&lt;!-- HTML 출력 결과 --&gt;&lt;form&gt; &lt;input type=\"text\" name=\"hobby\" value=\"\" id=\"id_hobby_1\"&gt; &lt;label for=\"id_hobby_1\"&gt;hobby_1&lt;/label&gt; &lt;input type=\"text\" name=\"hobby\" value=\"\" id=\"id_hobby_2\"&gt; &lt;label for=\"id_hobby_2\"&gt;hobby_2&lt;/label&gt; &lt;input type=\"text\" name=\"hobby\" value=\"\" id=\"id_hobby_3\"&gt; &lt;label for=\"id_hobby_3\"&gt;hobby_3&lt;/label&gt;&lt;/form&gt; function description #ids.seq 시퀀스 값을 반환한 후에 시퀀스 값을 1 증가시킨다. #ids.prev 이전 시퀀스 값을 반환한다. #ids.next 다음 시퀀스 값을 반환한다. Spring BeanSpring Framework 에서 관리되고 있는 bean을 Thymeleaf에서 참조할 수 있다. 12345678910111213141516/* Java */@Configuration(value=\"appConfig\")public class AppConfig &#123; @Value(\"$&#123;app.mode&#125;\") private String mode; public String getMode() &#123; return mode; &#125; public void setMode(String mode) &#123; this.mode = mode; &#125; public String getCurrentDate() &#123; FastDateFormat df = FastDateFormat.getInstance(\"yyyy/MM/dd\"); return df.format(new Date()); &#125;&#125; 123&lt;!-- Thymeleaf 템플릿 --&gt;&lt;p th:text=\"$&#123;@appConfig.getMode()&#125;\"&gt;&lt;/p&gt;&lt;p th:text=\"$&#123;@appConfig.getCurrentDate()&#125;\"&gt;&lt;/p&gt; 123&lt;!-- HTML 출력 결과 --&gt;&lt;p&gt;dev&lt;/p&gt;&lt;p&gt;2016/01/10&lt;/p&gt; Spring Type Convention$이나 * 처럼 2중 중괄호를 사용하면 Spring Type Convention을 이용해서 변수 값을 변환하여 표시할 수 있다. 123/* Java */@DateTimeFormat(pattern = \"yyyy-MM-dd\")private Date createAt; 12&lt;!-- Thymeleaf 템플릿 --&gt;&lt;td th:text=\"*&#123;&#123;createAt&#125;&#125;\"&gt;createAt&lt;/td&gt; 12&lt;!-- HTML 출력 결과 --&gt;&lt;td&gt;2016-01-10&lt;/td&gt;","categories":[{"name":"Web","slug":"Web","permalink":"https://indra818.github.io/categories/Web/"},{"name":"Spring","slug":"Web/Spring","permalink":"https://indra818.github.io/categories/Web/Spring/"}],"tags":[{"name":"thymeleaf","slug":"thymeleaf","permalink":"https://indra818.github.io/tags/thymeleaf/"},{"name":"spring","slug":"spring","permalink":"https://indra818.github.io/tags/spring/"},{"name":"spring-mvc","slug":"spring-mvc","permalink":"https://indra818.github.io/tags/spring-mvc/"}]},{"title":"Github Pages와 Hexo를 이용한 블로그 만들기","slug":"github-page-hexo-basic-guide","date":"2017-11-08T06:15:06.000Z","updated":"2018-08-07T05:40:56.332Z","comments":true,"path":"2017/11/08/github-page-hexo-basic-guide/","link":"","permalink":"https://indra818.github.io/2017/11/08/github-page-hexo-basic-guide/","excerpt":"","text":"첫 포스팅으로 Github와 Hexo를 이용한 블로그 개설을 기념하여 블로그 개설시 삽질한 내용을 공유한다. 필자는 naver blog를 시작으로 tistory, thoth, wordpress 등 웬만큼 유명한 블로그 플랫폼을 지식 저장소 개념으로 이용해 왔으나 항상 포스팅 및 글 편집에 있어서 불만족스러웠다. markdown을 지원하는 서비스 형 블로그들이 등장하였으나 소수에다 언제 서비스가 종료될 지 모르고 설치형의 경우 정보전달 보다는 개인 기록물 정도로 블로깅을 하는 필자로서는 서버 호스팅 비용이 부담스럽기에 이 두가지 단점을 모두 해결할 수 있는 Github Pages + Hexo 를 선택하게 되었다. 블로그를 개설하고 보니 그렇게 어려운 부분은 없었으나 뭐가 됐든 항상 초입은 삽질이 필수였으므로 블로그 개설 시 참고한 자료와 내용을 첫 포스팅으로 기록한다. Github Page 개설Github Page 개설은 Github Pages 홈페이지에 아주 친절하게 설정 과정을 설명하고 있기에 본 포스팅에서는 생략하고 링크로 대신한다. https://pages.github.com HexoHexo는 Jekyll와 함께 대표적으로 정적 페이지를 쉽게 만들 수 있도록 도와주는 서비스이다. 두 서비스 역시 블로그 지향적인 서비스이며 Hexo의 경우에는 npm을 통해 쉽게 설치가 가능하고 한 줄의 Command Line을 통해 Github에 바로 배포 할 수 있으며, Jekyll과 마찬가지로 다양한 플러그인과 테마를 지원하고 있다. 개인적으론 Jekyll 보다는 Hexo가 블로그용으론 더 강력하다고 생각됨 설치 전 준비Hexo를 이용하기 위해서는 먼저 아래의 구성 요소들이 사전에 설치가 되어 있어야 한다. 이미 설치가 되어 있다면 생략해도 좋다. Node.js Git Hexo CLI 설치 및 블로그 생성1234$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install 설정파일 업데이트Command Line을 통해 Hexo를 설치하고 블로그 생성이 완료가 되면 root 디렉토리에 _config.yml 이라는 설정파일이 생성이 되는데 이 곳에 블로그에 대한 대부분의 설정을 할 수 있다. 설정 값에 대한 자세한 정보는 Hexo의 Document를 통해 확인이 가능하다. Documentation - https://hexo.io/docs/ Site 정보블로그의 이름과 간략한 소개등을 수정 할 수 있다 1234title: 블로그 타이틀 (브라우저의 탭 타이틀로 표시됨)subtitle: 블로그 부제description: 블로그 간단 설명author: 저자명 URL 정보블로그 URL정보를 설정 할 수 있다 1234url: https://USERNAME.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults: 만약 본인의 Custom Domain을 적용하고 싶다면 url값은 이후에 Custom Domain 설정시 CNAME 파일을 생성 할 때도 참조한다. Github 정보자신의 Repository 정보를 입력하면 이후에 손쉽게 배포가 가능하다. 1234# Deploymentdeploy: type: git repo: https://USERNAME@github.com/USERNAME/USERNAME.github.io 위와 같이 설정 후 실제 배포 시에 아래와 같은 에러가 발생하는 경우 추가 플러그인을 설치해야 한다. 12&gt; ERROR Deployer not found: git&gt; hexo-deployer-git 설치 12&gt; npm install hexo-deployer-git --save&gt; 로컬에서 테스트기본적인 설정이 완료가 되면 아래의 Command Line을 통해 로컬에서 서버를 구동 할 수 있다. 1$ hexo server 서버가 구동이 되면 아래의 주소를 통해 브라우저에서 블로그에 접속 할 수 있다. http://localhost:4000 Github에 배포로컬에서 정상적으로 블로그에 접속이 되었다면 이미 생성한 Github Page Repository에 손쉽게 배포가 가능하다. Hexo 설정을 통해 정적 리소스 생성하기 1$ hexo generate 배포하기 1$ hexo deploy Generate와 Deploy 동시 실행 1$ hexo deploy --generate 배포가 완료가 되면 브라우저에서 USERNAME.github.io로 접속해 정상적으로 배포가 되었는지 확인한다. 주의사항간혹 hexo의 deploy기능을 통해 정상적으로 배포가 되었음에도 불구하고 페이지가 업데이트 되지 않는 현상이 있는데, 이 경우에는 아래와 같이 페이지를 clean후에 배포를 하면 해결된다. 12$ hexo clean$ hexo deploy --generate 테마 적용USERNAME.github.io를 통해 성공적으로 블로그 접속이 되었다면, 멋진 디자인을 적용한 테마(Theme)를 적용하고 싶을 것이다. Hexo에서는 아래의 페이지에서 다양한 Theme가 적용된 페이지를 소개하고 있다. https://hexo.io/themes/ 구체적인 테마 적용 방법은 아래 링크를 참고한다. https://simhyejin.github.io/2016/06/24/hexo-themes 포스트 작성아래의 Command Line을 입력하면, root 디렉토리의 source/_posts 폴더에 Markdown 파일이 하나 생성되는데 Hexo에서는 Markdown문서를 통해 포스트를 작성해 나가면 된다. 새 포스트 만들기1$ hexo new post [post_name] 예제 1$ hexo new post github-page-and-hexo 아래와 같은 경로에 Markdown 문서가 생성 된다 123ㄴ source ㄴ _posts - github-page-and-hexo.md 생성된 Markdown 문서에서 아래와 같이 제목을 수정 할 수 있다 1234---title: Github Page와 Hexo를 통해 30분만에 기술 블로그 만들기date: 2017-04-16 22:37:53--- Github Markdown Guide 기존 서비스형 블로그와 같이 초안 작성 및 세부 설정과 같은 내용은 아래 링크를 참고한다. http://futurecreator.github.io/2016/06/21/hexo-basic-usage 참고 자료 Github Pages와 Hexo를 통해 30분만에 기술 블로그 만들기 Hexo 기본 사용법 Hexo 테마 적용하기","categories":[{"name":"Web","slug":"Web","permalink":"https://indra818.github.io/categories/Web/"},{"name":"Hexo","slug":"Web/Hexo","permalink":"https://indra818.github.io/categories/Web/Hexo/"}],"tags":[{"name":"github","slug":"github","permalink":"https://indra818.github.io/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"https://indra818.github.io/tags/hexo/"},{"name":"blogging","slug":"blogging","permalink":"https://indra818.github.io/tags/blogging/"}]}]}